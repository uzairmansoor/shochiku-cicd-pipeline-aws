AWSTemplateFormatVersion: 2010-09-09
Description: Cfn template to deploy VPC and it's components
Parameters:
  project:
    Type: String
    Description: Project name
  env:
    Type: String
    Default: dev
    AllowedValues: [dev, qa, uat, prod]
    Description: Environment name
  app:
    Type: String
    Description: App name
  authorName:
    Type: String
    Description: The name of the author 
  vpcCidr:
    Type: String
    Description: IPV4 CIDR range for VPC
  vpcEnableDnsSupport:
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: Specify whether to enable or disable DNS support for VPC
  vpcEnableDnsHostName:
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: Specify whether to enable or disable DNS hostnames
  vpcAssignSubnetPublicIp:
    Type: String
    Default: true
    AllowedValues: [true, false]
    Description: Specify whether instance in public subnet assign public ip or not
  vpcPublicSubnet01Cidr:
    Type: String
    Default: ""
    Description: IPv4 CIDR range for public subnet in Az01
  vpcFrontendSubnet01Cidr:
    Type: String
    Default: ""
    Description: IPv4 CIDR range for frontend subnet in Az01
  vpcProtectedSubnet01Cidr:
    Type: String
    Default: ""
    Description: IPv4 CIDR range for protected subnet in Az01
  vpcShieldSubnet01Cidr:
    Type: String
    Default: ""
    Description: IPv4 CIDR range for shield subnet in Az01
  vpcPublicSubnet02Cidr:
    Type: String
    Default: ""
    Description: IPv4 CIDR range for public subnet in Az02
  vpcFrontendSubnet02Cidr:
    Type: String
    Default: ""
    Description: IPv4 CIDR range for frontend subnet in Az02
  vpcProtectedSubnet02Cidr:
    Type: String
    Default: ""
    Description: IPv4 CIDR range for protected subnet in Az02
  vpcShieldSubnet02Cidr:
    Type: String
    Default: ""
    Description: IPv4 CIDR range for shield subnet in Az02
  vpcPublicRouteDestinationCidr:
    Type: String
    Description: The IPv4 CIDR address for public route destination  
  vpcFrontendRouteDestinationCidr:
    Type: String
    Description: The IPv4 CIDR address for frontend route destination 
  vpcProtectedRouteDestinationCidr:
    Type: String
    Description: The IPv4 CIDR address for protected route destination 
  vpcShieldRouteDestinationCidr:
    Type: String
    Description: The IPv4 CIDR address for shield route destination
  vpcNaclActionRule:
    Type: String
    Default: allow
    AllowedValues: [allow, deny]
    Description: Specify whether to allow or deny the traffic based on the NACL rule
  vpcNaclPublicInboundCidr:
    Type: String
    Description: The CIDR range for inbound NACL rules in the public subnet
  vpcNaclFrontendInboundCidr:
    Type: String
    Description: The CIDR range for inbound NACL rules in the frontend subnet
  vpcNaclProtectedInboundCidr:
    Type: String
    Description: The CIDR range for inbound NACL rules in the protected subnet
  vpcNaclShieldInboundCidr:
    Type: String
    Description: The CIDR range for inbound NACL rules in the shield subnet
  vpcInternetTrafficOutboundCidr:
    Type: String
    Description: The IPv4 CIDR range for outbound internet traffic NACL rules 
  vpcNaclPublicInboundProtocol:
    Type: String
    Description: The protocol for inbound NACL rules in the public subnet
  vpcNaclFrontendInboundProtocol:
    Type: String
    Description: The protocol for inbound NACL rules in the frontend subnet
  vpcNaclProtectedInboundProtocol:
    Type: String
    Description: The protocol for inbound NACL rules in the protected subnet
  vpcNaclShieldInboundProtocol:
    Type: String
    Description: The protocol for inbound NACL rules in the shield subnet
  vpcNaclPublicInboundStartPort:
    Type: String
    Description: The starting port for inbound NACL rules in the public subnet
  vpcNaclPublicInboundEndPort:
    Type: String
    Description: The ending port for inbound NACL rules in the public subnet
  vpcNaclFrontendInboundStartPort:
    Type: String
    Description: The starting port for inbound NACL rules in the frontend subnet
  vpcNaclFrontendInboundEndPort:
    Type: String
    Description: The ending port for inbound NACL rules in the frontend subnet
  vpcNaclProtectedInboundStartPort:
    Type: String
    Description: The starting port for inbound NACL rules in the protected subnet
  vpcNaclProtectedInboundEndPort:
    Type: String
    Description: The ending port for inbound NACL rules in the protected subnet
  vpcNaclShieldInboundStartPort:
    Type: String
    Description: The starting port for inbound NACL rules in the shield subnet
  vpcNaclShieldInboundEndPort:
    Type: String
    Description: The ending port for inbound NACL rules in the shield subnet

Conditions:
  isEnableDnsSupport: !Equals [!Ref vpcEnableDnsSupport, "true"]
  isAz01: !Not [!Equals [!Ref vpcPublicSubnet01Cidr, ""]]
  isAz02: !Not [!Equals [!Ref vpcPublicSubnet02Cidr, ""]]

Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCidr
      EnableDnsSupport: !Ref vpcEnableDnsSupport
      EnableDnsHostnames: !If
        - isEnableDnsSupport
        - !Ref vpcEnableDnsSupport
        - false
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-vpc
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  # vpcFlowLog:
  #   Type: AWS::EC2::FlowLog
  #   Properties: 
  #     DeliverLogsPermissionArn: !Ref vpcFlowLogIamRoleArn
  #     LogDestination: !Ref vpcCloudWatchLogGroupArn
  #     LogDestinationType: !Ref vpcFlowLogDestinationType
  #     MaxAggregationInterval: !Ref vpcFlowLogMaxAggregationSeconds
  #     ResourceId: !Ref vpc
  #     ResourceType: !Ref vpcFlowLogResourceType
  #     TrafficType: !Ref vpcFlowLogTrafficType
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${project}-${env}-${app}-vpcFlowLog
  #       - Key: Author
  #         Value: !Ref authorName
  #       - Key: project
  #         Value: !Ref project
  #       - Key: environment
  #         Value: !Ref env
  #       - Key: app
  #         Value: !Ref app
  internetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: vpc  
  internetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: internetGateway
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref internetGateway
  # Availability Zone 1
  publicSubnet01Az01:
    Type: AWS::EC2::Subnet
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref vpcPublicSubnet01Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: !Ref vpcAssignSubnetPublicIp
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-publicSubnet01Az01-${vpc}
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbPublic01Az01:
    Type: AWS::EC2::RouteTable
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-rtbPublic01Az01
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app 
  rtbPublicSubnet01Az01Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: isAz01
    Properties:
      SubnetId: !Ref publicSubnet01Az01
      RouteTableId: !Ref rtbPublic01Az01
  publicRoute01Az01:
    Type: AWS::EC2::Route
    Condition: isAz01
    DependsOn: internetGatewayAttachment
    Properties:
      RouteTableId: !Ref rtbPublic01Az01
      DestinationCidrBlock: !Ref vpcPublicRouteDestinationCidr
      GatewayId: !Ref internetGateway
  naclPublic01Az01:
    Type: AWS::EC2::NetworkAcl
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-naclPublic01Az01
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  naclPublic01Az01InboundRule01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz01
    Properties:
      NetworkAclId: !Ref naclPublic01Az01
      RuleNumber: 100
      Protocol: !Ref vpcNaclPublicInboundProtocol
      RuleAction: !Ref vpcNaclActionRule 
      CidrBlock: !Ref vpcNaclPublicInboundCidr
      PortRange:
        From: !Ref vpcNaclPublicInboundStartPort
        To: !Ref vpcNaclPublicInboundEndPort
  naclPublic01Az01OutboundRule01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz01
    Properties:
      NetworkAclId: !Ref naclPublic01Az01
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcInternetTrafficOutboundCidr
  naclpublicSubnet01Az01Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: isAz01
    Properties:
      SubnetId: !Ref publicSubnet01Az01
      NetworkAclId: !Ref naclPublic01Az01
  eipAz01:
    Type: AWS::EC2::EIP
    Condition: isAz01
    Properties:
      Domain: vpc
  natGatewayAz01:
    Type: AWS::EC2::NatGateway
    Condition: isAz01
    Properties:
      AllocationId: !GetAtt eipAz01.AllocationId
      SubnetId: !Ref publicSubnet01Az01
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-natGatewayAz01
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  frontendSubnet01Az01:
    Type: AWS::EC2::Subnet
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref vpcFrontendSubnet01Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-frontendSubnet01Az01-${vpc}
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app 
  rtbFrontend01Az01:
    Type: AWS::EC2::RouteTable
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-rtbFrontendAz01
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app 
  rtbFrontendSubnet01Az01Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: isAz01
    Properties:
      SubnetId: !Ref frontendSubnet01Az01
      RouteTableId: !Ref rtbFrontend01Az01
  frontendRoute01Az01:
    Type: AWS::EC2::Route
    Condition: isAz01
    Properties:
      RouteTableId: !Ref rtbFrontend01Az01
      DestinationCidrBlock: !Ref vpcFrontendRouteDestinationCidr
      NatGatewayId: !Ref natGatewayAz01
  naclFrontend01Az01:
    Type: AWS::EC2::NetworkAcl
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-frontendAcl01
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  naclFrontend01Az01InboundRule01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz01
    Properties:
      NetworkAclId: !Ref naclFrontend01Az01
      RuleNumber: 100
      Protocol: !Ref vpcNaclFrontendInboundProtocol
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcNaclFrontendInboundCidr
      PortRange:
        From: !Ref vpcNaclFrontendInboundStartPort
        To: !Ref vpcNaclFrontendInboundEndPort
  naclFrontend01Az01OutboundRule01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz01
    Properties:
      NetworkAclId: !Ref naclFrontend01Az01
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcInternetTrafficOutboundCidr
  naclFrontendSubnet01Az01Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: isAz01
    Properties:
      SubnetId: !Ref frontendSubnet01Az01
      NetworkAclId: !Ref naclFrontend01Az01
  protectedSubnet01Az01:
    Type: AWS::EC2::Subnet
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref vpcProtectedSubnet01Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-protectedSubnet01Az01-${vpc}
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app 
  rtbProtected01Az01:
    Type: AWS::EC2::RouteTable
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-rtbProtected01Az01
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbprotectedSubnet01Az01Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: isAz01
    Properties:
      SubnetId: !Ref protectedSubnet01Az01
      RouteTableId: !Ref rtbProtected01Az01
  protectedRoute01Az01:
    Type: AWS::EC2::Route
    Condition: isAz01
    Properties:
      RouteTableId: !Ref rtbProtected01Az01
      DestinationCidrBlock: !Ref vpcProtectedRouteDestinationCidr
      NatGatewayId: !Ref natGatewayAz01
  naclProtected01Az01:
    Type: AWS::EC2::NetworkAcl
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-protectedAcl01
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  naclProtected01Az01InboundRule01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz01
    Properties:
      NetworkAclId: !Ref naclProtected01Az01
      RuleNumber: 100
      Protocol: !Ref vpcNaclProtectedInboundProtocol
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcNaclProtectedInboundCidr
      PortRange:
        From: !Ref vpcNaclProtectedInboundStartPort
        To: !Ref vpcNaclProtectedInboundEndPort
  naclProtected01Az01OutboundRule01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz01
    Properties:
      NetworkAclId: !Ref naclProtected01Az01
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcInternetTrafficOutboundCidr
  naclprotectedSubnet01Az01Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: isAz01
    Properties:
      SubnetId: !Ref protectedSubnet01Az01
      NetworkAclId: !Ref naclProtected01Az01
  shieldSubnet01Az01:
    Type: AWS::EC2::Subnet
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref vpcShieldSubnet01Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-shieldSubnet01Az01-${vpc}
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbShield01Az01:
    Type: AWS::EC2::RouteTable
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-rtbShield01Az01
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app 
  rtbshieldSubnet01Az01Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: isAz01
    Properties:
      SubnetId: !Ref shieldSubnet01Az01
      RouteTableId: !Ref rtbShield01Az01
  shieldRoute01Az01:
    Type: AWS::EC2::Route
    Condition: isAz01
    Properties:
      RouteTableId: !Ref rtbShield01Az01
      DestinationCidrBlock: !Ref vpcShieldRouteDestinationCidr
      NatGatewayId: !Ref natGatewayAz01
  naclShield01Az01:
    Type: AWS::EC2::NetworkAcl
    Condition: isAz01
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-shieldAcl01
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  naclShield01Az01InboundRule01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz01
    Properties:
      NetworkAclId: !Ref naclShield01Az01
      RuleNumber: 100
      Protocol: !Ref vpcNaclShieldInboundProtocol
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcNaclShieldInboundCidr
      PortRange:
        From: !Ref vpcNaclShieldInboundStartPort
        To: !Ref vpcNaclShieldInboundEndPort
  naclShield01Az01OutboundRule01:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz01
    Properties:
      NetworkAclId: !Ref naclShield01Az01
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcInternetTrafficOutboundCidr
  naclshieldSubnet01Az01Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: isAz01
    Properties:
      SubnetId: !Ref shieldSubnet01Az01
      NetworkAclId: !Ref naclShield01Az01
  # Availability Zone 2
  publicSubnet02Az02:
    Type: AWS::EC2::Subnet
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref vpcPublicSubnet02Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: !Ref vpcAssignSubnetPublicIp
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-publicSubnet02Az02-${vpc}
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbPublic02Az02:
    Type: AWS::EC2::RouteTable
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-rtbPublic02Az02
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbpublicSubnet02Az02Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: isAz02
    Properties:
      SubnetId: !Ref publicSubnet02Az02
      RouteTableId: !Ref rtbPublic02Az02
  publicRoute02Az02:
    Type: AWS::EC2::Route
    Condition: isAz02
    DependsOn: internetGatewayAttachment
    Properties:
      RouteTableId: !Ref rtbPublic02Az02
      DestinationCidrBlock: !Ref vpcPublicRouteDestinationCidr
      GatewayId: !Ref internetGateway
  naclPublic02Az02:
    Type: AWS::EC2::NetworkAcl
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-naclPublic02Az02
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  naclPublic02Az02InboundRule02:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz02
    Properties:
      NetworkAclId: !Ref naclPublic02Az02
      RuleNumber: 100
      Protocol: !Ref vpcNaclPublicInboundProtocol
      RuleAction: !Ref vpcNaclActionRule 
      CidrBlock: !Ref vpcNaclPublicInboundCidr
      PortRange:
        From: !Ref vpcNaclPublicInboundStartPort
        To: !Ref vpcNaclPublicInboundEndPort
  naclPublic02Az02OutboundRule02:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz02
    Properties:
      NetworkAclId: !Ref naclPublic02Az02
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcInternetTrafficOutboundCidr
  naclpublicSubnet02Az02Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: isAz02
    Properties:
      SubnetId: !Ref publicSubnet02Az02
      NetworkAclId: !Ref naclPublic02Az02
  frontendSubnet02Az02:
    Type: AWS::EC2::Subnet
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref vpcFrontendSubnet02Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-frontendSubnet02Az02-${vpc}
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbFrontend02Az02:
    Type: AWS::EC2::RouteTable
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-rtbFrontend02Az02
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbFrontendSubnet02Az02Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: isAz02
    Properties:
      SubnetId: !Ref frontendSubnet02Az02
      RouteTableId: !Ref rtbFrontend02Az02
  frontendRoute02Az02:
    Type: AWS::EC2::Route
    Condition: isAz02
    Properties:
      RouteTableId: !Ref rtbFrontend02Az02
      DestinationCidrBlock: !Ref vpcFrontendRouteDestinationCidr
      NatGatewayId: !Ref natGatewayAz01
  naclFrontend02Az02:
    Type: AWS::EC2::NetworkAcl
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-frontendAcl02
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  naclFrontend02Az02InboundRule02:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz02
    Properties:
      NetworkAclId: !Ref naclFrontend02Az02
      RuleNumber: 100
      Protocol: !Ref vpcNaclFrontendInboundProtocol
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcNaclFrontendInboundCidr
      PortRange:
        From: !Ref vpcNaclFrontendInboundStartPort
        To: !Ref vpcNaclFrontendInboundEndPort
  naclFrontend02Az02OutboundRule02:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz02
    Properties:
      NetworkAclId: !Ref naclFrontend02Az02
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcInternetTrafficOutboundCidr
  naclFrontendSubnet02Az02Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: isAz02
    Properties:
      SubnetId: !Ref frontendSubnet02Az02
      NetworkAclId: !Ref naclFrontend02Az02
  protectedSubnet02Az02:
    Type: AWS::EC2::Subnet
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref vpcProtectedSubnet02Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-protectedSubnet02Az02-${vpc}
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbProtected02Az02:
    Type: AWS::EC2::RouteTable
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-rtbProtected02Az02
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbProtectedSubnet02Az02Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: isAz02
    Properties:
      SubnetId: !Ref protectedSubnet02Az02
      RouteTableId: !Ref rtbProtected02Az02
  protectedRoute02Az02:
    Type: AWS::EC2::Route
    Condition: isAz02
    Properties:
      RouteTableId: !Ref rtbProtected02Az02
      DestinationCidrBlock: !Ref vpcProtectedRouteDestinationCidr
      NatGatewayId: !Ref natGatewayAz01
  naclProtected02Az02:
    Type: AWS::EC2::NetworkAcl
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-protectedAcl02
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  naclProtected02Az02InboundRule02:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz02
    Properties:
      NetworkAclId: !Ref naclProtected02Az02
      RuleNumber: 100
      Protocol: !Ref vpcNaclProtectedInboundProtocol
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcNaclProtectedInboundCidr
      PortRange:
        From: !Ref vpcNaclProtectedInboundStartPort
        To: !Ref vpcNaclProtectedInboundEndPort
  naclProtected02Az02OutboundRule02:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz02
    Properties:
      NetworkAclId: !Ref naclProtected02Az02
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcInternetTrafficOutboundCidr
  naclProtectedSubnet02Az02Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: isAz02
    Properties:
      SubnetId: !Ref protectedSubnet02Az02
      NetworkAclId: !Ref naclProtected02Az02
  shieldSubnet02Az02:
    Type: AWS::EC2::Subnet
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref vpcShieldSubnet02Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-shieldSubnet02Az02-${vpc}
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbShield02Az02:
    Type: AWS::EC2::RouteTable
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-rtbShield02Az02
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  rtbShieldSubnet02Az02Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: isAz02
    Properties:
      SubnetId: !Ref shieldSubnet02Az02
      RouteTableId: !Ref rtbShield02Az02
  shieldRoute02Az02:
    Type: AWS::EC2::Route
    Condition: isAz02
    Properties:
      RouteTableId: !Ref rtbShield02Az02
      DestinationCidrBlock: !Ref vpcShieldRouteDestinationCidr
      NatGatewayId: !Ref natGatewayAz01
  naclShield02Az02:
    Type: AWS::EC2::NetworkAcl
    Condition: isAz02
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub ${project}-${env}-${app}-shieldAcl02
        - Key: Author
          Value: !Ref authorName
        - Key: project
          Value: !Ref project
        - Key: environment
          Value: !Ref env
        - Key: app
          Value: !Ref app
  naclShield02Az02InboundRule02:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz02
    Properties:
      NetworkAclId: !Ref naclShield02Az02
      RuleNumber: 100
      Protocol: !Ref vpcNaclShieldInboundProtocol
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcNaclShieldInboundCidr
      PortRange:
        From: !Ref vpcNaclShieldInboundStartPort
        To: !Ref vpcNaclShieldInboundEndPort
  naclShield02Az02OutboundRule02:
    Type: AWS::EC2::NetworkAclEntry
    Condition: isAz02
    Properties:
      NetworkAclId: !Ref naclShield02Az02
      RuleNumber: 110
      Protocol: -1
      Egress: true
      RuleAction: !Ref vpcNaclActionRule
      CidrBlock: !Ref vpcInternetTrafficOutboundCidr
  naclShieldSubnet02Az02Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: isAz02
    Properties:
      SubnetId: !Ref shieldSubnet02Az02
      NetworkAclId: !Ref naclShield02Az02

Outputs:
  vpc:
    Description: VPC Id
    Value: !Ref vpc
    Export:
      Name: !Sub "${project}-${env}-${app}-vpcId-${AWS::Region}"
  internetGateway:
    Description: Internet Gateway Id
    Value: !Ref internetGateway
    Export:
      Name: !Sub "${project}-${env}-${app}-internetGatewayId-${AWS::Region}"
  natGatewayAz01:
    Condition: isAz01
    Description: NAT Gateway Id
    Value: !Ref natGatewayAz01
    Export:
      Name: !Sub "${project}-${env}-${app}-natGatewayAz01Id-${AWS::Region}"
  publicSubnet01Az01:
    Condition: isAz01
    Description: Public Subnet 01 Id
    Value: !Ref publicSubnet01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-publicSubnet01Az01Id-${AWS::Region}"
  frontendSubnet01Az01:
    Condition: isAz01
    Description: Frontend Subnet 01 Id
    Value: !Ref frontendSubnet01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-frontendSubnet01Az01Id-${AWS::Region}"
  protectedSubnet01Az01:
    Condition: isAz01
    Description: Protected Subnet 01 Id
    Value: !Ref protectedSubnet01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-protectedSubnet01Az01Id-${AWS::Region}"
  shieldSubnet01Az01:
    Condition: isAz01
    Description: Shield Subnet 01 Id
    Value: !Ref shieldSubnet01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-shieldSubnet01Az01Id-${AWS::Region}"
  rtbPublic01Az01:
    Condition: isAz01
    Description: Route Table Id For Public Subnet
    Value: !Ref rtbPublic01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-rtbPublic01Az01Id-${AWS::Region}"
  rtbFrontend01Az01:
    Condition: isAz01
    Description: Route Table Id For Frontend Subnet
    Value: !Ref rtbFrontend01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-rtbFrontend01Az01Id-${AWS::Region}"
  rtbProtected01Az01:
    Condition: isAz01
    Description: Route Table Id For Protected Subnet
    Value: !Ref rtbProtected01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-rtbProtected01Az01Id-${AWS::Region}"
  rtbShield01Az01:
    Condition: isAz01
    Description: Route Table Id For Shield Subnet
    Value: !Ref rtbShield01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-rtbShield01Az01Id-${AWS::Region}"
  naclPublic01Az01:
    Condition: isAz01
    Description: Public Network ACL Id
    Value: !Ref naclPublic01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-naclPublic01Az01Id-${AWS::Region}"
  naclFrontend01Az01:
    Condition: isAz01
    Description: Frontend Network ACL Id
    Value: !Ref naclFrontend01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-naclFrontend01Az01Id-${AWS::Region}"
  naclProtected01Az01:
    Condition: isAz01
    Description: Protected Network ACL Id
    Value: !Ref naclProtected01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-naclProtected01Az01Id-${AWS::Region}"
  naclShield01Az01:
    Condition: isAz01
    Description: Shield Network ACL Id
    Value: !Ref naclShield01Az01
    Export:
      Name: !Sub "${project}-${env}-${app}-naclShield01Az01Id-${AWS::Region}"
  publicSubnet02Az02:
    Condition: isAz02
    Description: Public Subnet 02 Id
    Value: !Ref publicSubnet02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-publicSubnet02Az02Id-${AWS::Region}"
  frontendSubnet02Az02:
    Condition: isAz02
    Description: Frontend Subnet 02 Id
    Value: !Ref frontendSubnet02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-frontendSubnet02Az02Id-${AWS::Region}"
  protectedSubnet02Az02:
    Condition: isAz02
    Description: Protected Subnet 02 Id
    Value: !Ref protectedSubnet02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-protectedSubnet02Az02Id-${AWS::Region}"
  shieldSubnet02Az02:
    Condition: isAz02
    Description: Shield Subnet 02 Id
    Value: !Ref shieldSubnet02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-shieldSubnet02Az02Id-${AWS::Region}"
  rtbPublic02Az02:
    Condition: isAz02
    Description: Route Table Id For Public Subnet
    Value: !Ref rtbPublic02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-rtbPublic02Az02Id-${AWS::Region}"
  rtbFrontend02Az02:
    Condition: isAz02
    Description: Route Table Id For Frontend Subnet
    Value: !Ref rtbFrontend02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-rtbFrontend02Az02Id-${AWS::Region}"
  rtbProtected02Az02:
    Condition: isAz02
    Description: Route Table Id For Protected Subnet
    Value: !Ref rtbProtected02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-rtbProtected02Az02Id-${AWS::Region}"
  rtbShield02Az02:
    Condition: isAz02
    Description: Route Table Id For Shield Subnet
    Value: !Ref rtbShield02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-rtbShield02Az02Id-${AWS::Region}"
  naclPublic02Az02:
    Condition: isAz02
    Description: Public Network ACL Id
    Value: !Ref naclPublic02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-naclPublic02Az02Id-${AWS::Region}"
  naclFrontend02Az02:
    Condition: isAz02
    Description: Frontend Network ACL Id
    Value: !Ref naclFrontend02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-naclFrontend02Az02Id-${AWS::Region}"
  naclFrontend02Az02:
    Condition: isAz02
    Description: Frontend Network ACL Id
    Value: !Ref naclFrontend02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-naclFrontend02Az02Id-${AWS::Region}"
  naclShield02Az02:
    Condition: isAz02
    Description: Shield Network ACL Id
    Value: !Ref naclShield02Az02
    Export:
      Name: !Sub "${project}-${env}-${app}-naclShield02Az02Id-${AWS::Region}"
  